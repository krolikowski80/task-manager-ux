import React,
{
useState,
useEffect
}

from 'react';

const API_URL='http://localhost:3001/tasks';

function App() {
  const [tasks,
  setTasks]=useState([]);
  const [showAddModal,
  setShowAddModal]=useState(false);

  const [taskData,
  setTaskData]=useState({
    title: '',
    description: '',
    due_date: '',
    priority: 'Normalne'
  });

useEffect(()=> {
    fetch(API_URL) .then(res=> res.json()) .then(data=> setTasks(data));
  }

  , []);

const toggleDone=async (id)=> {
  const task=tasks.find(t=> t.id===id);
  if ( !task) return;

  const updatedTask= {
    ...task,
    done: !task.done
  }

  ;

  const response=await fetch(`$ {
      API_URL
    }

    /$ {
      id
    }

    `, {

    method: 'PUT',
    headers: {
      'Content-Type': 'application/json'
    }

    ,
    body: JSON.stringify(updatedTask)
  });

if (response.ok) {
  setTasks(tasks.map(t=> t.id===id ? updatedTask : t));
}
}

;

const deleteTask=async (id)=> {
  const response=await fetch(`$ {
      API_URL
    }

    /$ {
      id
    }

    `, {
    method: 'DELETE'
  });

if (response.ok) {
  setTasks(tasks.filter(t=> t.id !==id));
}
}

;

return (<div className="container" > <h1>Task Manager</h1> <button className="add-button" onClick= {
    ()=> setShowAddModal(true)
  }

  >Add Task</button> <ul className="task-list" > {
    tasks.map(task=> (<li key= {
          task.id
        }

        className= {
          task.done ? 'done' : ''
        }

        > <div> <strong> {
          task.title
        }

        </strong> <span className= {
          `priority $ {
            task.priority
          }

          `
        }

        > {
          task.priority
        }

        </span> <div className="description" > {
          task.description
        }

        </div> <div className= {
          `date $ {
            task.due_date ? '' : 'missing'
          }

          `
        }

        > {
          task.due_date || 'No due date'
        }

        </div> </div> <div className="actions" > <button onClick= {
          ()=> toggleDone(task.id)
        }

        > {
          task.done ? 'Undo' : 'Done'
        }

        </button> <button onClick= {
          ()=> deleteTask(task.id)
        }

        >Delete</button> </div> </li>))
  }

  </ul> {
    showAddModal && (<AddTaskModal show= {
        showAddModal
      }

      onClose= {
        ()=> setShowAddModal(false)
      }

      onSubmit= {
        async ()=> {
          if ( !taskData.title || !taskData.description) return alert('UzupeÅ‚nij wszystkie pola');

          const response=await fetch(API_URL, {

            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }

            ,
            body: JSON.stringify(taskData)
          });

        if (response.ok) {
          const newTask=await response.json();
          setTasks(prev=> [...prev, newTask]);
          setShowAddModal(false);

          setTaskData({
            title: '', description: '', due_date: '', priority: 'Normalne'
          });
      }
    }
  }

  taskData= {
    taskData
  }

  setTaskData= {
    setTaskData
  }

  />)
}

</div>);
}

export default App;